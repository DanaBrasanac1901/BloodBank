// <auto-generated />
using System;
using BloodBankAPI.Materials.Enums;
using BloodBankAPI.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BloodBankAPI.Migrations
{
    [DbContext(typeof(BloodBankDbContext))]
    partial class BloodBankDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "appointment_status", new[] { "scheduled", "available", "completed" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender", new[] { "male", "female", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_type", new[] { "donor", "staff", "admin" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BloodBankAPI.Model.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Gender>("Gender")
                        .HasColumnType("gender");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<UserType>("UserType")
                        .HasColumnType("user_type");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("BloodBankAPI.Model.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("integer");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("QrCode")
                        .HasColumnType("bytea");

                    b.Property<int?>("ReportId")
                        .HasColumnType("integer");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<AppointmentStatus>("Status")
                        .HasColumnType("appointment_status");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("StaffId");

                    b.HasIndex("CenterId", "StartDate")
                        .IsUnique();

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("BloodBankAPI.Model.BloodCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AmountA")
                        .HasColumnType("integer");

                    b.Property<int?>("AmountAB")
                        .HasColumnType("integer");

                    b.Property<int?>("AmountB")
                        .HasColumnType("integer");

                    b.Property<int?>("AmountO")
                        .HasColumnType("integer");

                    b.Property<double>("AvgScore")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("WorkTimeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("WorkTimeStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BloodCenters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvgScore = 4.9000000000000004,
                            Description = "Blood transfusion center.",
                            Name = "Center 1",
                            WorkTimeEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkTimeStart = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AvgScore = 3.7000000000000002,
                            Description = "Blood transfusion center.",
                            Name = "Center 2",
                            WorkTimeEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkTimeStart = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AvgScore = 5.0,
                            Description = "Blood transfusion center.",
                            Name = "Center 3",
                            WorkTimeEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkTimeStart = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AvgScore = 4.2000000000000002,
                            Description = "Blood transfusion center.",
                            Name = "Center 4",
                            WorkTimeEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkTimeStart = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BloodBankAPI.Model.CancelledAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("integer");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<byte[]>("QrCode")
                        .HasColumnType("bytea");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<AppointmentStatus>("Status")
                        .HasColumnType("appointment_status");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.ToTable("CancelledAppointments");
                });

            modelBuilder.Entity("BloodBankAPI.Model.CenterAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CenterId")
                        .IsUnique();

                    b.ToTable("CenterAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CenterId = 1,
                            City = "Novi Sad",
                            Country = "Srbija",
                            StreetAddress = "Futoska 62"
                        },
                        new
                        {
                            Id = 2,
                            CenterId = 2,
                            City = "Novi Sad",
                            Country = "Srbija",
                            StreetAddress = "Bulevar Oslobodjenja 111"
                        },
                        new
                        {
                            Id = 3,
                            CenterId = 3,
                            City = "Novi Sad",
                            Country = "Srbija",
                            StreetAddress = "Strazilovska 18"
                        },
                        new
                        {
                            Id = 4,
                            CenterId = 4,
                            City = "Novi Sad",
                            Country = "Srbija",
                            StreetAddress = "Vere Petrovic 1"
                        });
                });

            modelBuilder.Entity("BloodBankAPI.Model.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool[]>("Answers")
                        .IsRequired()
                        .HasColumnType("boolean[]");

                    b.Property<int>("DonorId")
                        .HasColumnType("integer");

                    b.Property<int[]>("QuestionIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("BloodBankAPI.Model.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Text = "Have you donated blood in the last 6 months?"
                        },
                        new
                        {
                            Id = 2,
                            Text = "Have you ever been rejected as a blood donor?"
                        },
                        new
                        {
                            Id = 3,
                            Text = "Do you currently feel healthy and rested enough to donate blood?"
                        },
                        new
                        {
                            Id = 4,
                            Text = "Have you eaten anything prior to your arrival to donate blood?"
                        },
                        new
                        {
                            Id = 5,
                            Text = "Did you drink any alcohol in the last 6 hours?"
                        },
                        new
                        {
                            Id = 6,
                            Text = "Have you had any tattoos or piercings done in the last 6 months?"
                        },
                        new
                        {
                            Id = 7,
                            Text = "Have you ever consumed any type of opioids?"
                        },
                        new
                        {
                            Id = 8,
                            Text = "Have you ever had unsafe sexual intercourse with a person suffering from HIV?"
                        });
                });

            modelBuilder.Entity("BloodBankAPI.Model.Admin", b =>
                {
                    b.HasBaseType("BloodBankAPI.Model.Account");

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            Gender = Gender.FEMALE,
                            IsActive = true,
                            Name = "Marko",
                            Password = "AM/u63R1v9SxmknTfBDYIFJgB3+ABmOQZValIoEB0rsuGtKi4HhVbUca8lDFsZDRTA==",
                            Surname = "Dobrosavljevic",
                            UserType = UserType.ADMIN
                        });
                });

            modelBuilder.Entity("BloodBankAPI.Model.Donor", b =>
                {
                    b.HasBaseType("BloodBankAPI.Model.Account");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Jmbg")
                        .HasColumnType("bigint");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Strikes")
                        .HasColumnType("integer");

                    b.Property<string>("Workplace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Donors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "donor@gmail.com",
                            Gender = Gender.FEMALE,
                            IsActive = true,
                            Name = "Emilija",
                            Password = "AM/u63R1v9SxmknTfBDYIFJgB3+ABmOQZValIoEB0rsuGtKi4HhVbUca8lDFsZDRTA==",
                            Surname = "Medic",
                            UserType = UserType.DONOR,
                            Address = "Ise Bajica 1,Novi Sad,Srbija",
                            Jmbg = 34242423565L,
                            PhoneNumber = 381629448332L,
                            Profession = "student",
                            Strikes = 0,
                            Workplace = "Fakultet Tehnickih Nauka"
                        });
                });

            modelBuilder.Entity("BloodBankAPI.Model.Staff", b =>
                {
                    b.HasBaseType("BloodBankAPI.Model.Account");

                    b.Property<int>("BloodCenterId")
                        .HasColumnType("integer");

                    b.HasIndex("BloodCenterId");

                    b.ToTable("Staff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "staff@gmail.com",
                            Gender = Gender.MALE,
                            IsActive = true,
                            Name = "Milan",
                            Password = "AM/u63R1v9SxmknTfBDYIFJgB3+ABmOQZValIoEB0rsuGtKi4HhVbUca8lDFsZDRTA==",
                            Surname = "Miric",
                            UserType = UserType.STAFF,
                            BloodCenterId = 1
                        });
                });

            modelBuilder.Entity("BloodBankAPI.Model.Appointment", b =>
                {
                    b.HasOne("BloodBankAPI.Model.BloodCenter", "Center")
                        .WithMany("Appointments")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CENTER_APPTS");

                    b.HasOne("BloodBankAPI.Model.Donor", "Donor")
                        .WithMany("Appointments")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DONOR_APPTS");

                    b.HasOne("BloodBankAPI.Model.Staff", "Staff")
                        .WithMany("Appointments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_STAFF_APPTS");

                    b.Navigation("Center");

                    b.Navigation("Donor");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BloodBankAPI.Model.CancelledAppointment", b =>
                {
                    b.HasOne("BloodBankAPI.Model.Donor", "Donor")
                        .WithMany("CancelledAppointments")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DONOR_CANCELLED_APPTS");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("BloodBankAPI.Model.CenterAddress", b =>
                {
                    b.HasOne("BloodBankAPI.Model.BloodCenter", "BloodCenter")
                        .WithOne("CenterAddress")
                        .HasForeignKey("BloodBankAPI.Model.CenterAddress", "CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodCenter");
                });

            modelBuilder.Entity("BloodBankAPI.Model.Admin", b =>
                {
                    b.HasOne("BloodBankAPI.Model.Account", null)
                        .WithOne()
                        .HasForeignKey("BloodBankAPI.Model.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BloodBankAPI.Model.Donor", b =>
                {
                    b.HasOne("BloodBankAPI.Model.Account", null)
                        .WithOne()
                        .HasForeignKey("BloodBankAPI.Model.Donor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BloodBankAPI.Model.Staff", b =>
                {
                    b.HasOne("BloodBankAPI.Model.BloodCenter", "BloodCenter")
                        .WithMany("Staff")
                        .HasForeignKey("BloodCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BloodCenter");

                    b.HasOne("BloodBankAPI.Model.Account", null)
                        .WithOne()
                        .HasForeignKey("BloodBankAPI.Model.Staff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodCenter");
                });

            modelBuilder.Entity("BloodBankAPI.Model.BloodCenter", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CenterAddress")
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BloodBankAPI.Model.Donor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CancelledAppointments");
                });

            modelBuilder.Entity("BloodBankAPI.Model.Staff", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
